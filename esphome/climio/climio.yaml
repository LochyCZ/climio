substitutions:
  name: "climiochodbapatro"
  friendly_name: "Climio Chodba patro"
  project_version: "1.1.0"
  device_description: "Satellite with ESPHome software"
  error_sound_url: "https://github.com/LochyCZ/climio/raw/refs/heads/main/climio-error.mp3" # Error #8 by UNIVERSFIELD https://freesound.org/people/UNIVERSFIELD/sounds/734442/
  timer_finished_sound_url: "https://github.com/LochyCZ/climio/raw/refs/heads/main/climio-success-1.mp3" # New Notification #6 by UNIVERSFIELD https://freesound.org/people/UNIVERSFIELD/sounds/734445/

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: False
  platformio_options:
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  project:
    name: lochy.climio
    version: "${project_version}"
  min_version: 2024.7.3
  on_boot:
    then:
      - if:
          condition:
            switch.is_on: sensor_lighting
          then:
            - light.turn_on:
                id: top_led
                effect: slow_pulse
                red: 100%
                green: 60%
                blue: 0%
            - wait_until:
                condition:
                  wifi.connected:
            - light.turn_on:
                id: top_led
                effect: pulse
                red: 0%
                green: 100%
                blue: 0%
            - wait_until:
                condition:
                  api.connected:
            - light.turn_on:
                id: top_led
                effect: none
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s
            - script.execute: reset_led
      
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

#dashboard_import:
# package_import_url: github://tetele/onju-voice-satellite/esphome/onju-voice.yaml@main

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  #level: VERY_VERBOSE
  #logs:
  #  voice_assistant: VERY_VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
  reboot_timeout: 0s
  services:
    - service: start_va
      then:
        - voice_assistant.start
    - service: stop_va
      then:
        - voice_assistant.stop
    - service: notification_on
      then:
        - script.execute: turn_on_notification
    - service: notification_clear
      then:
        - script.execute: clear_notification
        
ota:
  platform: esphome
  password: !secret ota_password
  
# Allow provisioning Wi-Fi via serial
improv_serial:

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  #manual_ip:
    #static_ip: 10.0.0.45
    #gateway: 10.0.0.138
    #subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret wifi_ap_password

captive_portal:

globals:
  - id: notification
    type: bool
    restore_value: false

i2c:
  sda: GPIO08
  scl: GPIO09
  scan: true
  id: bus_a
  
i2s_audio:
  - i2s_lrclk_pin: GPIO13
    i2s_bclk_pin: GPIO18
    

media_player:
  - platform: i2s_audio
    name: None
    id: climio_out
    dac_type: external
    i2s_dout_pin: GPIO12
    mode: mono
    mute_pin:
      number: GPIO21
      inverted: True
    on_pause:
      - logger.log: "Playback paused!"
    on_idle:
      - logger.log: "Playback finished!"
    on_play:
      - logger.log: "Playback started!"
    on_announcement:
      - logger.log: "Announcing!"
microphone:
  - platform: i2s_audio
    id: climio_microphone
    i2s_din_pin: GPIO17
    adc_type: external
    
    pdm: false

voice_assistant:
  id: va
  #micro_wake_word:
  #microphone: climio_microphone
  microphone:
    microphone: climio_microphone
    channels: 0
    gain_factor: 4
  media_player: climio_out
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 10.0
  on_listening:
    - light.turn_on:
        id: top_led
        blue: 100%
        red: 100%
        green: 100%
        brightness: 100%
        effect: listening
  on_stt_vad_end:
    - light.turn_on:
        id: top_led
        blue: 100%
        red: 0%
        green: 20%
        brightness: 70%
        effect: processing
  on_tts_end:
    - media_player.play_media: !lambda return x;
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 20%
        green: 100%
        effect: speaking
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          media_player.is_playing: climio_out
    - script.execute: reset_led
  on_timer_started:
    - light.turn_on:
        id: top_led
        effect: random_twinkle
  on_timer_finished:
    - media_player.play_media: "${timer_finished_sound_url}"
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 100%
        green: 80%
        effect: slow_pulse
    - delay: 5s
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          and:
            - switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
  on_client_disconnected:
    - if:
        condition:
          and:
            - switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
  on_error:
    - media_player.play_media: "${error_sound_url}"
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 100%
        green: 0%
        effect: none
    - delay: 1s
    - script.execute: reset_led
     
one_wire:
  - platform: gpio
    pin: GPIO04

button:
  - platform: restart
    name: "Restart"
    
#binary_sensor:    
#  - platform: gpio
#    id: mute_switch
#    pin:
#      number: GPIO38
#      mode: INPUT_PULLUP
#    name: "${friendly_name} Disable wake word"
#    on_press:
#      - script.execute: turn_off_wake_word
#    on_release:
#      - script.execute: turn_on_wake_word

sensor:
  - platform: wifi_signal
    name: "Signal Strength"
    update_interval: 30s

  - platform: uptime
    name: "Uptime"
  
  - platform: dallas_temp
    address: 0x5700000f5c6dac28 
    name: "Temperature2"
    id: teplota2
    update_interval: 120s
  
  - platform: bme680
    temperature:
      name: "Temperature"
      oversampling: 16x
      id: teplota1
    pressure:
      name: "Pressure"
    humidity:
      id: "humidity"
      name: "Humidity"
    gas_resistance:
      id: "gas_resistance"
      name: "Gas Resistance"
    address: 0x77
    update_interval: 60s
  - platform: template
    name: "Air Quality"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;
    state_class: "measurement"
  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 60s
  - platform: template
    name: "Average temperature"
    id: prumerna_teplota
    device_class: "temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 2
    update_interval: 30s
    lambda: |- 
        if (isnan(id(teplota1).state) || isnan(id(teplota2).state)) {
          return NAN;
        }
        return (id(teplota1).state + id(teplota2).state) / 2.0;
text_sensor:
  - platform: template
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

light:
  - platform: esp32_rmt_led_strip
    id: leds
    pin: GPIO11
    chipset: SK6812
    num_leds: 8
    rgb_order: grb
    rmt_channel: 0
    default_transition_length: 0s
    gamma_correct: 2.8
  - platform: partition
    id: top_led
    segments:
      - id: leds
        from: 0
        to: 7
    default_transition_length: 100ms
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s
      - addressable_twinkle:
          name: listening_ww
          twinkle_probability: 1%
      - addressable_twinkle:
          name: listening
          twinkle_probability: 45%
      - addressable_scan:
          name: processing
          move_interval: 80ms
      - addressable_flicker:
          name: speaking
          intensity: 35%
      - addressable_random_twinkle:
          name: random_twinkle
          twinkle_probability: 45%
          
script:
  - id: reset_led
    then:
      - if:
          condition:
            - lambda: return id(notification);
          then:
            - light.turn_on:
                id: top_led
                blue: 100%
                red: 100%
                green: 0%
                brightness: 100%
                effect: slow_pulse
          else:
            - if:
                condition:
                  and:
                    - switch.is_on: use_wake_word
                    - switch.is_on: flicker_wake_word
                then:
                  - light.turn_on:
                      id: top_led
                      blue: 100%
                      red: 100%
                      green: 0%
                      brightness: 60%
                      effect: listening_ww
                else:
                  - light.turn_off: top_led

  - id: turn_on_notification
    then:
      - lambda: id(notification) = true;
      - script.execute: reset_led

  - id: clear_notification
    then:
      - lambda: id(notification) = false;
      - script.execute: reset_led

  - id: turn_on_wake_word
    then:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
          then:
            - lambda: id(va).set_use_wake_word(true);
            - if:
                condition:
                  not:
                    media_player.is_idle:
                then:
                  - media_player.stop:
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
            - script.execute: reset_led

  - id: turn_off_wake_word
    then:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led
      
switch:
  - platform: template
    name: "Use Wake Word"
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: turn_on_wake_word
    on_turn_off:
      - script.execute: turn_off_wake_word
  - platform: template
    name: "Wake Word Listening Light"
    id: flicker_wake_word
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    name: "Sensor Lighting"
    id: sensor_lighting
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

